# -*- coding: utf-8 -*-
"""Agente_ST.py ‚Äî UI minimalista/local

- Carrega o motor e o modelo LLM ao abrir (warm-up).
- Regex + pandas fazem tudo; LLM s√≥ reescreve UMA frase no final (opcional via toggle).
- Renderiza gr√°ficos (Plotly) quando o engine retornar "chart" no result (sem IA).
"""
from __future__ import annotations

import os
import time
import tempfile
from pathlib import Path
from typing import Any, Dict, Optional

import pandas as pd
import plotly.express as px
import streamlit as st
from sqlalchemy import create_engine

from Engine import StockEngine, EngineConfig  # mant√©m a API existente

# ============================
# Config da p√°gina
# ============================
st.set_page_config(
    page_title="Agente de Estoque",
    page_icon="üì¶",
    layout="wide",
)

PAGE_TITLE = "Agente de Estoque"
SESSION_ENGINE_KEY = "engine"
SESSION_DF_KEY = "df"


# ============================
# Estado & Inicializa√ß√£o
# ============================
if SESSION_ENGINE_KEY not in st.session_state:
    with st.spinner("Carregando motor e modelo local‚Ä¶"):
        # Carrega e aquece o modelo para evitar atraso na 1¬™ resposta
        st.session_state[SESSION_ENGINE_KEY] = StockEngine(
            EngineConfig(
                use_llm=True,          # mant√©m o modelo carregado em mem√≥ria
                warmup_on_init=True,   # aquece (1 token)
                warmup_max_tokens=1,
                n_ctx=512,             # contexto menor = mais r√°pido
                n_threads=6,           # ajuste ao seu i5 (ou use os.cpu_count())
                max_tokens=36,         # UMA frase curta para reescrever
                temperature=0.1,
            )
        )

if SESSION_DF_KEY not in st.session_state:
    st.session_state[SESSION_DF_KEY] = None


# ============================
# Helpers
# ============================
def _load_excel_to_df(uploaded_file: Any) -> pd.DataFrame:
    """L√™ o Excel de `uploaded_file`. Tenta via file-like; se falhar, salva tempor√°rio.

    Em seguida, aplica normaliza√ß√µes/classifica√ß√µes do engine.
    Mant√©m a API e sem√¢ntica do c√≥digo original.

    Par√¢metros
    ----------
    uploaded_file : Any
        Objeto retornado por `st.file_uploader` (file-like).

    Retorna
    -------
    pd.DataFrame
        DataFrame j√° classificado pelo engine.
    """
    engine = st.session_state[SESSION_ENGINE_KEY]

    # 1) Tenta ler direto do file-like
    try:
        df_raw = engine.read_excel(uploaded_file, sheet_name=0)
    except Exception:
        # 2) Fallback: salva como arquivo tempor√°rio .xlsx
        tmp_path: Optional[Path] = None
        try:
            with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp:
                tmp.write(uploaded_file.getbuffer())
                tmp_path = Path(tmp.name)
            df_raw = engine.read_excel(str(tmp_path), sheet_name=0)
        finally:
            if tmp_path and tmp_path.exists():
                try:
                    tmp_path.unlink(missing_ok=True)
                except Exception:
                    # Falha ao apagar o tempor√°rio n√£o √© cr√≠tica para o fluxo.
                    pass

    # Normaliza√ß√£o/classifica√ß√£o conforme engine
    df = engine.classify_supplier_by_description(df_raw)
    return df


def _resolve_db_password() -> str:
    """Resolve a senha do banco a partir de `st.secrets` ou vari√°vel de ambiente.

    Ordem de resolu√ß√£o:
    1. `st.secrets["DB_PASSWORD"]`
    2. `os.getenv("DB_PASSWORD")`

    Retorna
    -------
    str
        A senha encontrada.

    Levanta
    -------
    ValueError
        Se nenhuma fonte tiver a senha configurada.
    """
    # Preferir st.secrets se existir
    try:
        secrets_pw = st.secrets.get("DB_PASSWORD")  # type: ignore[attr-defined]
        if secrets_pw:
            return str(secrets_pw)
    except Exception:
        # st.secrets pode n√£o estar dispon√≠vel (modo local sem secrets.toml)
        pass

    env_pw = os.getenv("DB_PASSWORD")
    if env_pw:
        return env_pw

    raise ValueError(
        "A senha do banco n√£o foi encontrada. Defina `st.secrets['DB_PASSWORD']` "
        "ou a vari√°vel de ambiente 'DB_PASSWORD'."
    )


def _load_db_to_df() -> pd.DataFrame:
    """Conecta ao PostgreSQL e carrega dados de `estoque_end` para um DataFrame.

    Retorna
    -------
    pd.DataFrame
        DataFrame j√° classificado pelo engine.

    Observa√ß√µes
    -----------
    - Usa `sqlalchemy` com driver `psycopg2`.
    - N√£o faz cache propositalmente, pois invent√°rio costuma ser din√¢mico.
      (Se quiser, d√° para aplicar `@st.cache_data(ttl=60)` no `pd.read_sql`.)
    """
    try:
        db_config: Dict[str, Any] = {
            "dbname": "OperacaoVIVO",
            "user": "postgres",
            "password": _resolve_db_password(),
            "host": "localhost",
            "port": 5432,
        }

        # String de conex√£o
        url = (
            f"postgresql+psycopg2://{db_config['user']}:{db_config['password']}"
            f"@{db_config['host']}:{db_config['port']}/{db_config['dbname']}"
        )
        engine_sa = create_engine(url)

        query = "SELECT * FROM estoque_end"
        df = pd.read_sql(query, engine_sa)

        # Normaliza√ß√£o/classifica√ß√£o conforme engine
        df = st.session_state[SESSION_ENGINE_KEY].classify_supplier_by_description(df)
        return df

    except Exception as e:
        # Mensagem amig√°vel para o usu√°rio; detalhes t√©cnicos ficam no log/terminal
        st.error(f"Erro ao carregar dados do banco de dados: {e}")
        return pd.DataFrame()


def _render_chart(chart: Dict[str, Any]) -> None:
    """Renderiza gr√°ficos Plotly com base no hint retornado pelo engine.

    Par√¢metros
    ----------
    chart : dict
        Dicion√°rio esperado:
        - "type": {"bar", "pie"}
        - "df": pd.DataFrame
        - Para "bar": "x": str, "y": str
        - Para "pie": "names": str, "values": str
        - "title": str (opcional)
    """
    if not chart or not isinstance(chart, dict):
        return

    st.write("**Visualiza√ß√£o:**")
    try:
        ctype = chart.get("type")
        cdf: Any = chart.get("df")
        title = chart.get("title", "")

        if not isinstance(cdf, pd.DataFrame) or cdf.empty:
            st.info("Sem dados suficientes para o gr√°fico.")
            return

        if ctype == "bar":
            x, y = chart.get("x"), chart.get("y")
            if not all(col in cdf.columns for col in (x, y)):
                st.info("Configura√ß√£o de gr√°fico de barras inv√°lida.")
                return

            # Ordena por Y desc para leitura melhor
            cdf_plot = cdf.sort_values(by=y, ascending=False)
            fig = px.bar(
                cdf_plot,
                x=x,
                y=y,
                text=y,
                title=title,
                template="plotly_white",
            )
            fig.update_traces(textposition="outside")
            fig.update_layout(
                xaxis_title=x,
                yaxis_title=y,
                uniformtext_minsize=10,
                uniformtext_mode="hide",
                margin=dict(l=16, r=16, t=48, b=16),
            )
            st.plotly_chart(fig, use_container_width=True)

        elif ctype == "pie":
            names, values = chart.get("names"), chart.get("values")
            if not all(col in cdf.columns for col in (names, values)):
                st.info("Configura√ß√£o de gr√°fico de pizza inv√°lida.")
                return

            fig = px.pie(
                cdf,
                names=names,
                values=values,
                title=title,
                hole=0.35,
                template="plotly_white",
            )
            # Mais leg√≠vel com muitas fatias
            fig.update_traces(textposition="inside", textinfo="percent+label")
            fig.update_layout(margin=dict(l=16, r=16, t=48, b=16))
            st.plotly_chart(fig, use_container_width=True)

        else:
            st.info("Tipo de gr√°fico n√£o suportado.")
    except Exception as e:
        st.info(f"N√£o foi poss√≠vel renderizar o gr√°fico: {e}")


# ============================
# Sidebar (Upload / Banco de Dados)
# ============================
with st.sidebar:
    st.header("Fonte de Dados")

    data_source = st.radio(
        "Selecione a fonte de dados",
        ("Banco de Dados", "Upload Planilha (.xlsx)"),
        index=0,
        help="Escolha entre carregar do PostgreSQL ou fazer upload de um .xlsx",
    )

    if data_source == "Upload Planilha (.xlsx)":
        st.header("üì§ Upload da Planilha (.xlsx)")
        uploaded = st.file_uploader("Selecione o arquivo", type=["xlsx"])

        if uploaded is not None:
            with st.spinner("Lendo e preparando dados‚Ä¶"):
                st.session_state[SESSION_DF_KEY] = _load_excel_to_df(uploaded)
            st.success("Planilha carregada e processada!")

    elif data_source == "Banco de Dados":
        with st.spinner("Carregando dados do banco de dados‚Ä¶"):
            st.session_state[SESSION_DF_KEY] = _load_db_to_df()
        st.success("Dados do banco de dados carregados e processados!")


# ============================
# Corpo principal
# ============================
st.title("Oi, sou seu Agente de Estoque. Como posso lhe ajudar?")

# Resumo r√°pido dos dados carregados (se houver)
df_atual = st.session_state[SESSION_DF_KEY]
if isinstance(df_atual, pd.DataFrame) and not df_atual.empty:
    st.caption(f"Dados carregados: {len(df_atual):,} linhas √ó {len(df_atual.columns)} colunas".replace(",", "."))

# Formul√°rio para evitar re-execu√ß√£o a cada tecla e agrupar submiss√£o
with st.form(key="form_consulta", clear_on_submit=False):
    usar_ia = st.checkbox(
        "Resposta elaborada (IA)",
        value=False,
        help=(
            "Quando desativado: resposta imediata (regex + pandas). "
            "Quando ativado: a IA reformula apenas a frase final (os c√°lculos continuam em pandas)."
        ),
    )

    question = st.text_input("Digite sua pergunta sobre a planilha carregada:")
    consultar = st.form_submit_button("Consultar", type="primary")

if consultar:
    if st.session_state[SESSION_DF_KEY] is None:
        st.warning("Fa√ßa o upload de uma planilha .xlsx na barra lateral ou selecione o banco de dados antes de consultar.")
    elif not question.strip():
        st.info("Digite uma pergunta e clique em Consultar.")
    else:
        try:
            t0 = time.perf_counter()
            result: Dict[str, Any] = st.session_state[SESSION_ENGINE_KEY].answer(
                st.session_state[SESSION_DF_KEY],
                question.strip(),
                narrate=usar_ia,  # IA apenas na narrativa final
            )
            dt = time.perf_counter() - t0

            st.markdown(f"**Resposta:** {result.get('text', '')}")
            st.caption(f"‚è±Ô∏è Tempo total: {dt:.2f}s")

            # Gr√°fico (se houver hint)
            chart = result.get("chart")
            if chart:
                _render_chart(chart)

            # Recorte / Resultados (se houver)
            table: pd.DataFrame = result.get("table", pd.DataFrame())
            if isinstance(table, pd.DataFrame) and not table.empty:
                st.write("**Recorte/Resultados:**")
                st.dataframe(table, use_container_width=True)

            # (Opcional) Detalhes de desempenho
            timings = result.get("timings", {})
            if isinstance(timings, dict) and timings:
                with st.expander("‚è±Ô∏è Detalhes de desempenho (parse/pandas/LLM)"):
                    st.json(timings, expanded=False)

        except Exception as e:
            st.error(f"N√£o foi poss√≠vel processar a consulta: {e}")


# ============================
# Est√©tica leve (opcional)
# ============================
hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    </style>
"""
